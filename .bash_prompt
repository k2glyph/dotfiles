# Sexy bash prompt by twolfson
# https://github.com/twolfson/sexy-bash-prompt
# Forked from gf3, https://gist.github.com/gf3/306785

# Determine what type of terminal we are using for `tput`
if [[ $COLORTERM = gnome-* && $TERM = xterm ]]  && infocmp gnome-256color >/dev/null 2>&1; then export TERM=gnome-256color
elif [[ $TERM != dumb ]] && infocmp xterm-256color >/dev/null 2>&1; then export TERM=xterm-256color
fi

# If we are on a colored terminal
if tput setaf 1 &> /dev/null; then
    # Reset the shell from our `if` check
    tput sgr0

    # If the terminal supports at least 256 colors, write out our 256 color based set
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      USER_COLOR=$(tput setaf 27) #BLUE
      PREPOSITION_COLOR=$(tput setaf 7) #WHITE
      DEVICE_COLOR=$(tput setaf 39) #INDIGO
      DIR_COLOR=$(tput setaf 76) #GREEN
      GIT_STATUS_COLOR=$(tput setaf 154) #YELLOW
    else
    # Otherwise, use colors from our set of 16
      # Original colors from fork
      USER_COLOR=$(tput setaf 5) #MAGENTA
      PREPOSITION_COLOR=$(tput setaf 7) #WHITE
      DEVICE_COLOR=$(tput setaf 4) #ORANGE
      DIR_COLOR=$(tput setaf 2) #GREEN
      GIT_STATUS_COLOR=$(tput setaf 1) #PURPLE
    fi

    # Save common color actions
    BOLD=$(tput bold)
    NORMAL=$PREPOSITION_COLOR
    RESET=$(tput sgr0)
else
# Otherwise, use ANSI escape sequences for coloring
    # Original colors from fork
    USER_COLOR="\033[1;31m" #MAGENTA
    PREPOSITION_COLOR="\033[1;37m" #WHITE
    DEVICE_COLOR="\033[1;33m" #ORANGE
    DIR_COLOR="\033[1;32m" #GREEN
    GIT_STATUS_COLOR="\033[1;35m" #PURPLE
    BOLD=""
    RESET="\033[m"
fi

function get_git_branch() {
  # Grab the branch                  | ltrim unused rows    Remove asterisk
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1/"
}

is_branch1_behind_branch2 () {
  # $ git log origin/master..master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # -> commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # -> commit

  #           Look up if branch $1 has logs off of $2   | Pluck the first log | Return the first word "commit"
  FIRST_LOG=$(git log $1..$2 -1 --no-color 2> /dev/null | head -n1            | sed -e "s/^\(commit\).*/\1/")

  # If there was a first commit, echo out
  [[ $FIRST_LOG == "commit" ]] && echo 1
}

parse_git_ahead () {
  # Grab the local and remote branch
  BRANCH=$(get_git_branch)
  REMOTE_BRANCH=origin/$BRANCH

  # $ git log origin/master..master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the remote branch is behind the local branch
  [[ -n $(is_branch1_behind_branch2 $REMOTE_BRANCH $BRANCH) ]] ||
    # or it has not been merged into origin
    [[ $(git branch -r --no-color 2> /dev/null | grep origin/$BRANCH 2> /dev/null | tail -n1) == "" ]] &&
    # echo our character
    echo 1
}

parse_git_behind () {
  # Grab the branch
  BRANCH=$(get_git_branch)
  REMOTE_BRANCH=origin/$BRANCH

  # $ git log master..origin/master
  # commit 4a633f715caf26f6e9495198f89bba20f3402a32
  # Author: Todd Wolfson <todd@twolfson.com>
  # Date:   Sun Jul 7 22:12:17 2013 -0700
  #
  #     Unsynced commit

  # If the local branch is behind the remote branch
  [[ -n $(is_branch1_behind_branch2 $BRANCH $REMOTE_BRANCH) ]] &&
    # echo our character
    echo 1
}

parse_git_dirty () {
  # nothing to commit, working directory clean
  # nothing to commit (working directory clean)
  [[ $(git status 2> /dev/null | tail -n1 | sed -E "s/nothing to commit..working directory clean.?/1/") != "1" ]] && echo 1
}

function is_on_git() {
  git branch 2> /dev/null
}

function get_git_status() {
  # Grab the git dirty and git behind
  DIRTY_BRANCH=$(parse_git_dirty)
  BRANCH_AHEAD=$(parse_git_ahead)
  BRANCH_BEHIND=$(parse_git_behind)

  # Iterate through all the cases and if it matches, then echo
  if [[ $DIRTY_BRANCH == 1 && $BRANCH_AHEAD == 1 && $BRANCH_BEHIND == 1 ]]; then
    echo "â¬¢"
  elif [[ $DIRTY_BRANCH == 1 && $BRANCH_AHEAD == 1 ]]; then
    echo "â–²"
  elif [[ $DIRTY_BRANCH == 1 && $BRANCH_BEHIND == 1 ]]; then
    echo "â–¼"
  elif [[ $BRANCH_AHEAD == 1 && $BRANCH_BEHIND == 1 ]]; then
    echo "â¬¡"
  elif [[ $BRANCH_AHEAD == 1 ]]; then
    echo "â–³"
  elif [[ $BRANCH_BEHIND == 1 ]]; then
    echo "â–½"
  elif [[ $DIRTY_BRANCH == 1 ]]; then
    echo "*"
  fi
}

get_git_info () {
  # Grab the branch
  BRANCH=$(get_git_branch)

  # If there are any branches
  if [[ $BRANCH != "" ]]; then
    # Echo the branch
    OUTPUT=$BRANCH

    # Add on the git status
    OUTPUT=$OUTPUT"$(get_git_status)"

    # Echo our output
    echo $OUTPUT
  fi
}

# Symbol displayed at the line of every prompt
get_prompt_symbol () {
  # Some prompts display $ for a non-version control dir, âˆ“ for git, and Â§ for mercurial
  # I have chosen to keep it consistent
  echo "$"
}

PS1="\[${BOLD}${USER_COLOR}\]\u \[$PREPOSITION_COLOR\]at \[$DEVICE_COLOR\]\h \[$PREPOSITION_COLOR\]in \[$DIR_COLOR\]\w\[$PREPOSITION_COLOR\]\$([[ -n \$(is_on_git) ]] && echo \" on \")\[$GIT_STATUS_COLOR\]\$(get_git_info)\[$NORMAL\]$(get_prompt_symbol) \[$RESET\]"
